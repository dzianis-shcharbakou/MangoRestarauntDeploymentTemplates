# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: AzureResourceManagerTemplateDeployment@3
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'templatesRepository'
    subscriptionId: '3b17d851-4b89-4b9f-b4f4-99ccab0432be'
    action: 'Create Or Update Resource Group'
    resourceGroupName: 'dev-template-test-rg'
    location: 'West Europe'
    templateLocation: 'URL of the file'
    csmFileLink: 'https://raw.githubusercontent.com/whitechapel5991/MangoRestarauntDeploymentTemplates/main/azuredeploy.json'
    overrideParameters: '-administratorLogin $(administratorLogin) -administratorLoginPassword $(administratorLoginPassword) -productApiDbServerName $(productApiDbServerName) -sqlDBName $(sqlDBName) -serverfarmsMangoPlanName $(serverfarmsMangoPlanName) -sitesMangoProductApiDevName $(sitesMangoProductApiDevName)'
    deploymentMode: 'Incremental'
    deploymentName: 'DeployMangoTemplates'
    deploymentOutputs: 'armOutputs'
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $user = ""
      $token = "igrvgllzy4aows4vlohizkpiv52fbmz7ybftc2k6o5o3bcowrmoa"
      $teamProject = "LearnDevOps"
      $orgName = "whitechapel2995"
      $repoName = "MangoRestaurantItems"

          function InvokeGetFileRequest ($GitFilePath, $OutFilePath)
          {
              Write-Host "Download file" $GitFilePath "to" $OutFilePath

              #$AzureDevOpsAuthenicationHeader = @{Authorization = 'Basic ' + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$($token)")) }
              $uriOrganization = "https://dev.azure.com/$orgName/"
              $uriGetFile = $uriOrganization + "/LearnDevOps/_apis/git/repositories/$repoName/items?scopePath=$GitFilePath&download=true&api-version=6.1-preview.1"

              Write-Host "Url:" $uriGetFile
              Invoke-RestMethod -Uri $uriGetFile -Method get -OutFile $OutFilePath
              #-Headers $AzureDevOpsAuthenicationHeader
          }

      InvokeGetFileRequest -GitFilePath "/ProductApiItems/11.jpg" -OutFilePath ".\11.jpg"
      InvokeGetFileRequest -GitFilePath "/ProductApiItems/12.jpg" -OutFilePath ".\12.jpg"
      InvokeGetFileRequest -GitFilePath "/ProductApiItems/13.jpg" -OutFilePath ".\13.jpg"
      InvokeGetFileRequest -GitFilePath "/ProductApiItems/14.jpg" -OutFilePath ".\14.jpg"

      ls $(Build.SourcesDirectory)
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $json = '$(armOutputs)' | convertfrom-json
      $value = $json.blobStorageName.value
      Write-Host "##vso[task.setvariable variable=blobStorageName;]$value"
  name: ParseARMOutput
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Blob Storage Name:" $(blobStorageName)
  name: UseBlobStorageName
- task: AzureCLI@2
  inputs:
    azureSubscription: 'templatesRepository'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      export containerName=${{variables.blobStorageName}}"/default/mango-product"
      echo ${containerName}
      echo ${{blobStorageName}}
      # az storage blob upload \
      #     --account-name ${blobStorageName} \
      #     --container-name $containerName \
      #     --name 11.jpg \
      #     --file 11.jpg \
      #     --auth-mode login
    ContainerName: 'mango-product'